================================================================================
🎯 React/Next.js 프로젝트에서 줄바꿈 사용법 완전 가이드
================================================================================

📅 작성일: 2024년
🔧 프로젝트: Restaurant Website
⚡ 대상: content-grid.tsx, signature-menu.tsx, hero.tsx 등

================================================================================
🚨 중요한 점: React에서 일반 텍스트에 <br /> 태그를 넣어도 작동하지 않습니다!
================================================================================

❌ 작동하지 않는 방법:
<p>첫 번째 줄<br />두 번째 줄</p>  // 단순 문자열로 처리됨

✅ 작동하는 방법들:
1. JSX 방식 (권장)
2. dangerouslySetInnerHTML 방식
3. CSS whitespace 방식

================================================================================
🎯 방법 1: JSX 방식 (가장 안전하고 권장)
================================================================================

📝 현재 프로젝트에 적용된 방법입니다.

✅ 장점:
- 가장 안전함 (XSS 공격 방지)
- React에서 권장하는 방식
- 타입 안전성 보장
- 코드 가독성 좋음

📋 사용법:

1️⃣ CONTENT_CONFIG에서 설정:
```javascript
// src/components/sections/content-grid.tsx 예시
const CONTENT_CONFIG = {
  cards: [
    {
      title: '프리미엄 스테이크',
      description: '일반 텍스트 (백업용)',
      descriptionJSX: (
        <>
          완벽하게 구워낸 미디엄 레어 스테이크,<br />
          풍부한 마블링과 깊은 풍미가 일품
        </>
      )
    }
  ]
}
```

2️⃣ 컴포넌트에서 렌더링:
```javascript
<p className="텍스트스타일">
  {CONTENT_CONFIG.cards[0].descriptionJSX || CONTENT_CONFIG.cards[0].description}
</p>
```

🎯 실제 적용 예시 (signature-menu.tsx):
```javascript
fullDescriptionJSX: (
  <>
    압도적인 비주얼의 프라임 토마호크.<br />
    겉은 바삭, 속은 촉촉하게 구워져<br />
    육즙이 풍성하게 터져 나옵니다.
  </>
)
```

================================================================================
🎯 방법 2: dangerouslySetInnerHTML 방식
================================================================================

⚠️ 주의: XSS 공격 가능성이 있어 신뢰할 수 있는 콘텐츠에만 사용

✅ 장점:
- HTML 태그를 그대로 사용 가능
- 기존 HTML 콘텐츠 재사용 용이

❌ 단점:
- 보안 위험성
- React에서 권장하지 않음

📋 사용법:

1️⃣ 텍스트에 HTML 태그 포함:
```javascript
const CONTENT_CONFIG = {
  cards: [
    {
      description: '첫 번째 줄<br />두 번째 줄<br />세 번째 줄'
    }
  ]
}
```

2️⃣ 렌더링:
```javascript
<p 
  className="텍스트스타일"
  dangerouslySetInnerHTML={{ __html: description }}
>
</p>
```

================================================================================
🎯 방법 3: CSS whitespace 방식
================================================================================

✅ 장점:
- 안전함
- 간단함
- 일반 텍스트 사용

📋 사용법:

1️⃣ CSS 클래스 추가 (이미 globals.css에 추가됨):
```css
.whitespace-pre-line {
  white-space: pre-line;
}
```

2️⃣ 텍스트에 \n 사용:
```javascript
const CONTENT_CONFIG = {
  cards: [
    {
      description: '첫 번째 줄\n두 번째 줄\n세 번째 줄'
    }
  ]
}
```

3️⃣ 렌더링:
```javascript
<p className="텍스트스타일 whitespace-pre-line">
  {description}
</p>
```

================================================================================
🎯 각 컴포넌트별 적용 방법
================================================================================

📁 src/components/sections/content-grid.tsx:
✅ 현재 상태: JSX 방식 적용됨
🔧 사용법: CONTENT_CONFIG.cards[].descriptionJSX에 JSX 요소 추가

📁 src/components/sections/signature-menu.tsx:
✅ 현재 상태: JSX 방식 적용됨
🔧 사용법: CONTENT_CONFIG.menuItems[].fullDescriptionJSX에 JSX 요소 추가

📁 src/components/sections/hero.tsx:
🔧 추가 적용 방법: CONTENT_CONFIG.hero에 JSX 요소 추가

📁 src/app/stake-review/page.tsx:
🔧 추가 적용 방법: PAGE_CONTENT에 JSX 요소 추가

================================================================================
🚀 실전 사용 예시
================================================================================

1️⃣ 간단한 줄바꿈:
```javascript
descriptionJSX: (
  <>
    첫 번째 줄<br />
    두 번째 줄
  </>
)
```

2️⃣ 여러 줄바꿈:
```javascript
descriptionJSX: (
  <>
    제목 부분<br />
    <br />
    내용 첫 번째 줄<br />
    내용 두 번째 줄<br />
    <br />
    마지막 줄
  </>
)
```

3️⃣ 강조와 함께:
```javascript
descriptionJSX: (
  <>
    <strong>강조된 첫 번째 줄</strong><br />
    일반 텍스트 두 번째 줄<br />
    <em>기울임 세 번째 줄</em>
  </>
)
```

================================================================================
🔧 새로운 컴포넌트에 적용하는 방법
================================================================================

1️⃣ CONTENT_CONFIG에 JSX 필드 추가:
```javascript
const CONTENT_CONFIG = {
  새로운섹션: {
    title: '제목',
    description: '백업용 텍스트',
    descriptionJSX: (
      <>
        원하는 텍스트<br />
        줄바꿈된 텍스트
      </>
    )
  }
}
```

2️⃣ 컴포넌트에서 렌더링:
```javascript
<p className="스타일클래스">
  {CONTENT_CONFIG.새로운섹션.descriptionJSX || CONTENT_CONFIG.새로운섹션.description}
</p>
```

================================================================================
🛠️ 문제 해결 (Troubleshooting)
================================================================================

❓ 문제: <br /> 태그가 화면에 그대로 표시됨
✅ 해결: JSX 방식 또는 dangerouslySetInnerHTML 사용

❓ 문제: 줄바꿈이 전혀 안 됨
✅ 해결: 
   1. JSX 방식 확인
   2. descriptionJSX 필드가 있는지 확인
   3. 렌더링 부분에서 JSX 사용하는지 확인

❓ 문제: 컴파일 에러 발생
✅ 해결: JSX 문법 확인 (<> </> 제대로 닫혔는지)

================================================================================
📋 체크리스트
================================================================================

새로운 줄바꿈을 추가할 때 확인해야 할 것들:

□ CONTENT_CONFIG에 descriptionJSX (또는 xxxJSX) 필드 추가했는가?
□ JSX 문법이 올바른가? (<> </> 제대로 사용)
□ 렌더링 부분에서 JSX 필드를 사용하고 있는가?
□ 백업용 일반 텍스트도 준비했는가?
□ CSS 클래스는 적절히 적용되어 있는가?

================================================================================
💡 추가 팁
================================================================================

🎯 성능 최적화:
- JSX 요소는 컴포넌트 외부(CONTENT_CONFIG)에 정의하여 재렌더링 최소화

🎯 유지보수:
- 긴 텍스트는 여러 줄로 나누어 가독성 향상
- 주석으로 각 줄의 의미 설명 추가

🎯 일관성:
- 프로젝트 전체에서 동일한 방식(JSX) 사용
- 네이밍 규칙 통일 (xxxJSX)

================================================================================
🔗 관련 파일들
================================================================================

📁 주요 설정 파일:
- src/app/globals.css (CSS 유틸리티 클래스)
- src/components/sections/content-grid.tsx
- src/components/sections/signature-menu.tsx
- src/components/sections/hero.tsx
- src/app/stake-review/page.tsx

📁 폰트 설정 파일:
- src/app/layout.tsx (폰트 로드)
- public/fonts/ (폰트 파일들)

================================================================================
📞 도움이 필요할 때
================================================================================

1. 이 문서의 예시 코드 참조
2. 기존 작동하는 컴포넌트 코드 참조 (content-grid.tsx, signature-menu.tsx)
3. React 공식 문서의 JSX 섹션 참조

================================================================================
끝.
================================================================================ 