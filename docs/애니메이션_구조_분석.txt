==============================================================================
🎬 레스토랑 웹사이트 애니메이션 구조 분석 문서
==============================================================================

📅 작성일: 현재
📝 목적: 현재 애니메이션 시스템의 구조적 문제점 파악 및 개선 방향 제시

==============================================================================
📊 현재 애니메이션 시스템 개요
==============================================================================

현재 프로젝트의 애니메이션은 다음과 같은 방식으로 구현되어 있습니다:

1. CSS 키프레임 애니메이션 (globals.css)
2. Tailwind CSS 트랜지션 클래스
3. JavaScript 기반 Intersection Observer
4. 컴포넌트별 개별 애니메이션 설정
5. 슬라이더 자동/수동 애니메이션

==============================================================================
🔍 애니메이션 구현 방식별 상세 분석
==============================================================================

1. ⚙️ CSS 키프레임 애니메이션 (globals.css)
------------------------------------------------------------------
📍 위치: src/app/globals.css (137-162 라인)

정의된 애니메이션:
- @keyframes fade-in-up: Y축 30px 이동 + 투명도 변화
- 클래스: .animate-fade-in-up (0.8s ease-out)
- 지연 클래스: .animation-delay-200/400/600

현재 문제점:
❌ 하드코딩된 지연 시간 (0.2s, 0.4s, 0.6s)
❌ 단일 애니메이션 타입만 지원 (fade-in-up)
❌ 재사용성 부족
❌ 동적 제어 불가능

2. 🎨 컴포넌트별 애니메이션 설정
------------------------------------------------------------------

🔸 Hero 컴포넌트 (src/components/sections/hero.tsx)
animations: {
  transition: 'transition-opacity duration-300',
  pulse: 'animate-pulse',
  shadow: 'shadow-2xl'
}

특징:
- 비디오 호버 효과
- 펄스 애니메이션 (맥박 효과)
- 모달 전환 애니메이션

🔸 SignatureMenu 컴포넌트 (src/components/sections/signature-menu.tsx)
animations: {
  transition: 'transition-all duration-300',
  hoverScale: 'group-hover:scale-105',
  imageTransition: 'transition-transform duration-500',
  backdropBlur: 'backdrop-blur-sm'
}

특징:
- 복잡한 CSS-in-JS 그라디언트 애니메이션
- 키프레임 정의가 컴포넌트 내부에 하드코딩
- 슬라이더 애니메이션과 연동

🔸 ContentGrid 컴포넌트 (src/components/sections/content-grid.tsx)
animations: {
  fadeIn: 'animate-fade-in-up',
  delays: {
    first: 'animation-delay-200',
    second: 'animation-delay-400', 
    third: 'animation-delay-600'
  },
  hover: {
    scale: 'group-hover:scale-105',
    transition: 'transition-all duration-500'
  }
}

특징:
- Intersection Observer 사용
- 단계별 지연 애니메이션
- 카드 호버 효과

3. 🔄 슬라이더 애니메이션 (useSlider.ts)
------------------------------------------------------------------
📍 위치: src/hooks/useSlider.ts

기능:
- 자동 슬라이드 진행 (4초 간격)
- 무한 루프 효과 (3세트 복제)
- 모바일/데스크톱 반응형 처리
- 스크롤 기반 인덱스 계산

현재 문제점:
❌ 복잡한 인덱스 계산 로직
❌ 하드코딩된 카드 너비/간격
❌ 타이밍 의존적인 setTimeout 사용
❌ 리셋 포인트 계산 오류 가능성

4. 🌐 Intersection Observer 애니메이션
------------------------------------------------------------------
📍 위치: src/components/sections/content-grid.tsx (138-157 라인)

구현 방식:
```javascript
const observer = new IntersectionObserver(
  ([entry]) => {
    if (entry.isIntersecting) {
      setIsVisible(true)
    }
  },
  {
    threshold: 0.1,
    rootMargin: '50px'
  }
)
```

특징:
- 뷰포트 진입 시 애니메이션 트리거
- 한 번만 실행 (재진입 시 재실행 안됨)
- 50px 여백 설정

==============================================================================
🚨 주요 문제점 및 개선 필요 사항
==============================================================================

1. 🏗️ 구조적 문제점
------------------------------------------------------------------
❌ 애니메이션 로직이 각 컴포넌트에 분산
❌ 일관성 없는 애니메이션 타이밍 (300ms, 500ms, 800ms)
❌ 하드코딩된 설정값들
❌ 재사용 가능한 애니메이션 시스템 부재
❌ 성능 최적화 부족

2. 🎭 CSS-in-JS 관련 문제
------------------------------------------------------------------
❌ SignatureMenu의 CSS 키프레임이 <style jsx>로 하드코딩
❌ 동적 스타일 생성으로 인한 성능 저하
❌ 스타일 충돌 가능성
❌ 서버 사이드 렌더링 이슈 가능성

3. 🔄 슬라이더 애니메이션 문제
------------------------------------------------------------------
❌ 복잡한 인덱스 계산 로직
❌ 정확성 부족한 스크롤 위치 계산
❌ 메모리 누수 가능성 (여러 setTimeout)
❌ 모바일/데스크톱 분기 처리 복잡성

4. 📱 반응형 처리 문제
------------------------------------------------------------------
❌ 애니메이션 타이밍이 화면 크기별로 일관성 부족
❌ 모바일에서 불필요한 애니메이션 실행
❌ 터치 인터랙션 고려 부족

==============================================================================
💡 개선 방향 제안
==============================================================================

1. 🎯 통합 애니메이션 시스템 구축
------------------------------------------------------------------
✅ 중앙집중식 애니메이션 설정 파일
✅ 재사용 가능한 애니메이션 Hook 개발
✅ 일관성 있는 타이밍 시스템
✅ 프리셋 기반 애니메이션 패턴

2. 🚀 성능 최적화
------------------------------------------------------------------
✅ CSS Transform/Opacity 위주 애니메이션
✅ will-change 속성 활용
✅ 불필요한 리렌더링 방지
✅ requestAnimationFrame 활용

3. 📐 구조 개선
------------------------------------------------------------------
✅ 애니메이션 상태 관리 통합
✅ 컴포넌트와 애니메이션 로직 분리
✅ 타입 안전성 확보
✅ 테스트 가능한 구조

4. 🎨 사용자 경험 개선
------------------------------------------------------------------
✅ 사용자 모션 설정 존중 (prefers-reduced-motion)
✅ 로딩 상태 애니메이션
✅ 에러 상태 처리
✅ 접근성 고려사항

==============================================================================
📋 현재 사용 중인 애니메이션 라이브러리
==============================================================================

의존성 분석 (package.json):
- Tailwind CSS (기본 애니메이션)
- 외부 애니메이션 라이브러리 없음 (Framer Motion, GSAP 등 미사용)
- 순수 CSS + JavaScript 구현

장점:
✅ 가벼운 번들 크기
✅ 빠른 로딩 속도

단점:
❌ 복잡한 애니메이션 구현 어려움
❌ 개발 생산성 저하
❌ 유지보수 복잡성

==============================================================================
🎬 애니메이션별 현재 상태 요약
==============================================================================

1. Hero 비디오 애니메이션: ⚠️ 기본 작동, 모달 처리 개선 필요
2. SignatureMenu 슬라이더: 🔴 복잡하고 불안정, 전면 개선 필요
3. ContentGrid 페이드인: 🟡 기본 작동, 재사용성 개선 필요
4. 버튼/호버 효과: 🟢 양호, 일관성 개선 필요
5. 로딩 애니메이션: 🟡 단순한 스피너, 개선 여지 있음

==============================================================================
🏁 결론 및 다음 단계
==============================================================================

현재 애니메이션 시스템은 기본적인 동작은 하지만, 다음과 같은 문제들로 인해
유지보수와 확장이 어려운 상태입니다:

핵심 문제:
1. 분산된 애니메이션 로직
2. 하드코딩된 설정값
3. 복잡한 슬라이더 구현
4. 일관성 부족

권장 개선 순서:
1단계: 애니메이션 설정 중앙집중화
2단계: 슬라이더 로직 단순화 및 안정화
3단계: 재사용 가능한 애니메이션 Hook 개발
4단계: 성능 최적화 및 접근성 개선

이 문서를 바탕으로 단계적인 리팩토링을 진행하면 더 안정적이고
유지보수 가능한 애니메이션 시스템을 구축할 수 있을 것입니다.

============================================================================== 